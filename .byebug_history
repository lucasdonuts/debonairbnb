q
item.each_key{ |key| pp key.to_sym }
item = items.first
q
c
n
q
n
to_sym
to_sym = items.each { |item| item.each_key { |key| key = key.to_sym } }
to_sym[0]
to_sym = items.each { |item| item.each_key { |key| key.to_sym } }
to_sym = items.each do |item|
to_sym = items.each do |item|each_key { |key| key.to_sym }
to_sym = items.each_key { |key| key.to_sym }
items
JSON.parse(unparse)
unparse.to_a
unparse.hash
unparse.is_a?
unparse = JSON.unparse(items)
JSON.unparse(items)
items.unparse
pp JSON.methods
JSON.methods
JSON.parse(items)
item["name"]
item
item.has_key?(:name)
item.has_key?(name)
item.keys
item[:name]
item
item.name
q
item.methods
item.type
item(:name)
item[name]
item[:name]
item.name
item
q
items
n
items
file
n
q
n
q
n
q
n
q
display_error_message(ex)
n
q
error
n
q
error
n
error
n
file
q
error
n
file
errors
errors.display
errors.extend
errors.pretty_inspect
errors = error_reporter
pp error_reporter.methods
error_reporter.hash
error_reporter.methods
error_reporter.keys
error_reporter.to_s
error_reporter.to_h
error_reporter.report
error_reporter
error
n
q
items.length
items.size
q
pp items
items.length
q
items.length
pp items
items
q
RestClient.get(men_parse)
men_parse
men
q
women_encode_parse
women_parse_encode
Addressable::URI.parse(men_encode).to_s
Addressable::URI.parse(men_encode)
Addressable::URI.encode(men_encode)
men_encode
women_encode
wmen_encode
q
women_parse.to_s
women_parse
women_encode
q
women_uri
women_uri.to_s
q
women_uri.to_s
women_uri
q
c
n
exit
c
user
exit
c
exit
